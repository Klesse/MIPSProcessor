// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2021 22:55:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MIPS_Completo_DBG
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_Completo_DBG_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [31:0] DM_addrdata_DBG;
wire DM_memwrite_DBG;
wire [31:0] DM_readdata_DBG;
wire [31:0] DM_writedata_DBG;
wire [31:0] PC_DBG;
wire [5:0] RF_Addr1_DBG;
wire [5:0] RF_Addr2_DBG;
wire [5:0] RF_Addr3_DBG;
wire [31:0] RF_DataRead1_DBG;
wire [31:0] RF_DataRead2_DBG;
wire [31:0] RF_DataWrite3_DBG;
wire [31:0] instr_DBG;

// assign statements (if any)                          
MIPS_Completo_DBG i1 (
// port map - connection between master ports and signals/registers   
	.DM_addrdata_DBG(DM_addrdata_DBG),
	.DM_memwrite_DBG(DM_memwrite_DBG),
	.DM_readdata_DBG(DM_readdata_DBG),
	.DM_writedata_DBG(DM_writedata_DBG),
	.PC_DBG(PC_DBG),
	.RF_Addr1_DBG(RF_Addr1_DBG),
	.RF_Addr2_DBG(RF_Addr2_DBG),
	.RF_Addr3_DBG(RF_Addr3_DBG),
	.RF_DataRead1_DBG(RF_DataRead1_DBG),
	.RF_DataRead2_DBG(RF_DataRead2_DBG),
	.RF_DataWrite3_DBG(RF_DataWrite3_DBG),
	.clk(clk),
	.instr_DBG(instr_DBG),
	.reset(reset)
);
initial 
begin 
#960000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 
endmodule

